 -- First Answer -- 
CREATE DATABASE IF NOT exists SQLTraining;

USE sqltraining;

CREATE TABLE CUX_OM_CUSTOMERS_46321 (
	CUSTOMER_ID BIGINT primary key,
    CUSTOMER_NUMBER VARCHAR(30) NOT NULL,
    CUSTOMER_NAME VARCHAR(100) NOT NULL,
    TELEPHONE VARCHAR(50) ,
    START_DATE_ACTIVE DATE ,
    END_DATE_ACTIVE DATE,
    CREATED_BY BIGINT NOT NULL,
    CREATION_DATE date NOT NULL,
    LAST_UPDATED_BY  BIGINT NOT NULL,
    LAST_UPDATE_DATE DATE NOT NULL,
    LAST_UPDATE_LOGIN BIGINT
);

CREATE UNIQUE INDEX CUX_OM_CUSTOMERS_46321_U2
ON CUX_OM_CUSTOMERS_46321 (CUSTOMER_NUMBER);

CREATE UNIQUE INDEX CUX_OM_CUSTOMERS_46321_U3TN
ON CUX_OM_CUSTOMERS_46321 (CUSTOMER_NAME);

CREATE TABLE CUX_OM_ITEMS_46321 (
	ITEM_ID BIGINT primary key,
    ITEM_NUMBER VARCHAR(30) NOT NULL,
    ITEM_NAME VARCHAR(100) NOT NULL,
    UOM_CODE VARCHAR(25) ,
    START_DATE_ACTIVE DATE ,
    END_DATE_ACTIVE DATE,
    CREATED_BY BIGINT NOT NULL,
    CREATION_DATE date NOT NULL,
    LAST_UPDATED_BY  BIGINT NOT NULL,
    LAST_UPDATE_DATE DATE NOT NULL,
    LAST_UPDATE_LOGIN BIGINT
);

CREATE UNIQUE INDEX CUX_OM_ITEMS__46321_U2
ON CUX_OM_ITEMS_46321 (ITEM_NUMBER);

CREATE TABLE CUX_OM_HEADERS_46321(
	HEADER_ID BIGINT PRIMARY KEY,
    ORG_ID BIGINT DEFAULT 101,
    ORDER_NUMBER VARCHAR(30) NOT NULL,
    CUSTOMER_ID BIGINT,
    ORDER_DATE DATE NOT NULL,
    ORDER_STATUS VARCHAR(30),
    `DESCRIPTION` VARCHAR(240),
    CREATED_BY BIGINT NOT NULL,
    CREATION_DATE DATE NOT NULL,
    LAST_UPDATED_BY BIGINT NOT NULL,
    LAST_UPDATE_DATE DATE NOT NULL,
    LAST_UPDATE_LOGIN BIGINT,
    ATTRIBUTE_CATEGORY VARCHAR(30),
    ATTRIBUTE1 VARCHAR(150),
    ATTRIBUTE2 VARCHAR(150),
    ATTRIBUTE3 VARCHAR(150),
    ATTRIBUTE4 VARCHAR(150),
    ATTRIBUTE5 VARCHAR(150),
    ATTRIBUTE6 VARCHAR(150),
    ATTRIBUTE7 VARCHAR(150),
    ATTRIBUTE8 VARCHAR(150),
    ATTRIBUTE9 VARCHAR(150),
    ATTRIBUTE10 VARCHAR(150),
    ATTRIBUTE11 VARCHAR(150),
    ATTRIBUTE12 VARCHAR(150),
    ATTRIBUTE13 VARCHAR(150),
    ATTRIBUTE14 VARCHAR(150),
    ATTRIBUTE15 VARCHAR(150)
);

CREATE UNIQUE INDEX CUX_OM_HEADERS__46321_U2
ON CUX_OM_HEADERS_46321 (ORDER_NUMBER);

DROP TABLE cux_om_lines_46321;
CREATE TABLE CUX_OM_LINES_46321(
	LINE_ID BIGINT PRIMARY KEY,
    HEADER_ID BIGINT NOT NULL,
    LINE_NUMBER VARCHAR(30) NOT NULL,
    ITEM_ID BIGINT NOT NULL,
    UNIT_PRICE DECIMAL(10,2),
    QUANTITY DECIMAL(10,2),
    `DESCRIPTION` VARCHAR(240),
    ADDITION1 VARCHAR(150),
    ADDITION2 VARCHAR(150),
    ADDITION3 VARCHAR(150),
    ADDITION4 VARCHAR(150),
    ADDITION5 VARCHAR(150),
    CREATED_BY BIGINT NOT NULL,
    CREATION_DATE DATE NOT NULL,
    LAST_UPDATED_BY BIGINT NOT NULL,
    LAST_UPDATE_DATE DATE NOT NULL,
    LAST_UPDATE_LOGIN BIGINT,
    ATTRIBUTE_CATEGORY VARCHAR(30),
    ATTRIBUTE1 VARCHAR(150),
    ATTRIBUTE2 VARCHAR(150),
    ATTRIBUTE3 VARCHAR(150),
    ATTRIBUTE4 VARCHAR(150),
    ATTRIBUTE5 VARCHAR(150),
    ATTRIBUTE6 VARCHAR(150),
    ATTRIBUTE7 VARCHAR(150),
    ATTRIBUTE8 VARCHAR(150),
    ATTRIBUTE9 VARCHAR(150),
    ATTRIBUTE10 VARCHAR(150),
    ATTRIBUTE11 VARCHAR(150),
    ATTRIBUTE12 VARCHAR(150),
    ATTRIBUTE13 VARCHAR(150),
    ATTRIBUTE14 VARCHAR(150),
    ATTRIBUTE15 VARCHAR(150)
);

-- Second Answer -- 
SELECT * FROM cux_om_customers_46321;
SELECT * FROM cux_om_items_46321;
SELECT * FROM cux_om_headers_46321;
SELECT * FROM cux_om_lines_46321;

-- Third Answer-- 
CREATE VIEW CUX_OM_HEADERS_V AS
SELECT h.*, c.CUSTOMER_NUMBER, c.CUSTOMER_NAME, c.TELEPHONE
FROM cux_om_headers_46321 h
JOIN cux_om_customers_46321 c ON h.CUSTOMER_ID = c.CUSTOMER_ID;

-- Fourth Answer --
SELECT h.ORDER_NUMBER AS `order_number`, c.CUSTOMER_NUMBER AS `customer_number`,
c.CUSTOMER_NAME AS `customer_name`, h.ORDER_DATE AS `order_date`, h.ORDER_STATUS AS `order_status`,
h.`DESCRIPTION` AS `description`
FROM cux_om_headers_46321 as h
JOIN cux_om_customers_46321 as c ON h.CUSTOMER_ID = c.CUSTOMER_ID
ORDER BY c.CUSTOMER_NUMBER, h.ORDER_NUMBER ASC;

-- Five Answer --
SELECT h.ORDER_NUMBER AS `order_number`, c.CUSTOMER_NAME AS `customer_name`, h.ORDER_DATE as `order_date`, 
h.ORDER_STATUS as `order_status`, l.LINE_NUMBER AS `line_number`, i.ITEM_NUMBER AS `item_number`, 
i.ITEM_NAME AS `item_name`
FROM cux_om_headers_46321 h
JOIN cux_om_customers_46321 c ON h.CUSTOMER_ID = c.CUSTOMER_ID
JOIN cux_om_lines_46321 l on l.HEADER_ID = h.HEADER_ID
JOIN cux_om_items_46321 i on l.ITEM_ID = i.ITEM_ID
ORDER BY h.ORDER_NUMBER, l.LINE_NUMBER ASC;

-- Six Answer --
SELECT c.CUSTOMER_NUMBER AS `customer_number`, c.CUSTOMER_NAME AS `customer_name`, 
i.ITEM_NUMBER AS `item_number`, i.ITEM_NAME AS `item_name`, i.UOM_CODE AS `uom_code`
FROM cux_om_customers_46321 c 
JOIN cux_om_headers_46321 h ON c.CUSTOMER_ID = h.CUSTOMER_ID
JOIN cux_om_lines_46321 l on l.HEADER_ID = h.HEADER_ID
JOIN cux_om_items_46321 i ON l.ITEM_ID = i.ITEM_ID;

-- Seven Answer --
SELECT i.ITEM_NUMBER AS `item_number`, i.ITEM_NAME AS `item_name`, 
AVG(l.UNIT_PRICE) AS `average_unit_price`, MAX(l.UNIT_PRICE) AS `highest_unit_price`,
MIN(l.UNIT_PRICE) AS `lowest_unit_price`
FROM cux_om_lines_46321 l
JOIN cux_om_items_46321 i ON l.ITEM_ID = i.ITEM_ID
JOIN cux_om_headers_46321 h ON h.HEADER_ID = l.HEADER_ID
WHERE h.ORDER_STATUS != 'CANCELLED'
GROUP BY i.ITEM_ID;

-- Eight Answer --
SELECT c.CUSTOMER_NUMBER AS `customer_number`, c.CUSTOMER_NAME AS `customer_name`,
c.TELEPHONE AS `telephone`, c.START_DATE_ACTIVE AS `start_date_active`, 
c.END_DATE_ACTIVE AS `end_date_active`
FROM cux_om_customers_46321 c 
JOIN cux_om_headers_46321 h ON c.CUSTOMER_ID = h.CUSTOMER_ID
WHERE h.ORDER_STATUS = 'CANCELLED';

-- Nine Answer --
SELECT SUM(l.UNIT_PRICE * l.QUANTITY) AS `Total Sales`
FROM cux_om_lines_46321 l
JOIN cux_om_items_46321 i ON l.ITEM_ID = i.ITEM_ID
JOIN cux_om_headers_46321 h ON h.HEADER_ID = l.HEADER_ID
WHERE h.ORDER_STATUS != 'CANCELLED' AND YEAR(h.ORDER_DATE) = 2015;

-- Ten Answer --
CREATE INDEX CUX_OM_ITEMS_46321_N2
ON cux_om_items_46321 (ITEM_NAME); 